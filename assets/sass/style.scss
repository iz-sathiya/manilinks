// Core variables and mixins

// Core CSS
@import "bootstrap"; 

// Compass css3 components
@import "compass/css3";

// CSS3 Animation
@import "CSS:css/animate";
// @import "CSS:css/jquery-ui";

// Font awsome css
@import "font-awesome/font-awesome";

@import "bootstrap-variables";

// Common css
@import "variables";
@import "common";
@import "fonts";
// custom CSS
@import "theme";



/// Base path for assets (fonts, images...),
/// should not include trailing slash
/// @access public
/// @type String

$asset-base-path: '../assets' !default;

/// Asset URL builder
/// @access private
/// @param {String} $type - Asset type, matching folder name
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the asset
@function asset($type, $file) {
  @return url($asset-base-path + '/' + $type + '/' + $file);
}

/// Image asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the image
/// @require {function} asset
@function image($file) {
  @return asset('img', $file);
}

/// Font asset helper
/// @access public
/// @param {String} $file - Asset file name, including extension
/// @return {URL} - A `url()` function leading to the font
/// @require {function} asset
@function font($file) {
  @return asset('fonts', $file);
}



/* custom css Start */

@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {
  @include with-each-prefix(border-radius, $border-radius-threshold) {
    @if $current-prefix == -webkit {
      // Legacy Webkit didn't understand the official shorthand syntax for specifying a vertical radius.
      $legacy-webkit-radius: first-value-of($radius);
      @if $vertical-radius {
        $legacy-webkit-radius: append($legacy-webkit-radius, first-value-of($vertical-radius));
      }
      @include prefix-prop(border-radius, $legacy-webkit-radius);
    }
    @else {
      // Official syntax for everyone else
      @include prefix-prop(border-radius, if($vertical-radius, #{$radius} / #{$vertical-radius}, $radius));
    }
  }
}



/* custom css End */

/* Basic CSS */


// Responsive style

@media (min-width: $break-sm) { }
@media (max-width: $break-sm) { }
